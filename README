# Como utilizar o software

`python app.py -a <v1> <v2>`

Assim você estará chamando a aplicação e enviando dois valores que representam os
nós de onde a emergência se encontra. Mas entenda que a emergência se encontra entre
os dois nós. O arco (aresta) que liga os dois nós é o local da emergência. Foi assim
que fizemos, pois em um exemplo real acidente podem acontecer no percurso entre vértices.

Depois que você rodar o comando acima no seu terminal. A aplicação deverá exportar as saídas
dentro do diretório 'results' na raíz desse pacote de software.

# Graph

Para a classe Graph exist a GraphTest que testa e valida as ações básicas e
derivadas. Para verificar isso basta no seu terminal você digitar:

`python -m unittest discover -s ./ -p "*Test.py"`

# RandomGraphGenerator

A função para gerar grafos regulares aleatórios é baseada nos artigos:

Não é necessário, porém você poderá gerar grafos regulares com a chamada

`python app.py -e`

Então vá até o diretório 'dat' e encontre as gerações lá.

        .. [1] A. Steger and N. Wormald,
           Generating random regular graphs quickly,
           Probability and Computing 8 (1999), 377-396, 1999.
           http://citeseer.ist.psu.edu/steger99generating.html

        .. [2] Jeong Han Kim and Van H. Vu,
           Generating random regular graphs,
           Proceedings of the thirty-fifth ACM symposium on Theory of computing,
           San Diego, CA, USA, pp 213--222, 2003.
           http://portal.acm.org/citation.cfm?id=780542.780576

Essa função gera Arestas com Custo, retornando um Set(), mais ou menos nesse estilo:

Aresta : Vértice 0, Vértice 1, Custo Aleatório
Aresta : Vértice 2, Vértice 3, Custo Aleatório
Aresta : Vértice 4, Vértice 5, Custo Aleatório
Aresta : Vértice 6, Vértice 7, Custo Aleatório
Aresta : Vértice 8, Vértice 9, Custo Aleatório

Portanto esse grafo exemplo tem 10 vértices e 5 arestas.